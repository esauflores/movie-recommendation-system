[project]
name = "movie-recommendation-system"
version = "0.1.0"
description = "A movie recommendation system using OpenAI embeddings and FastAPI"
readme = "README.md"
requires-python = ">=3.11"

# Core dependencies needed to run the project
dependencies = [
    "aiohttp>=3.12.13",
    "dvc>=3.60.1",
    "dvc-s3>=3.2.2",
    "fastapi[all]>=0.115.13",
    "kagglehub>=0.3.12",
    "mlflow>=3.1.1",
    "openai>=1.91.0",
    "pgvector>=0.4.1",
    "polars>=1.31.0",
    "psycopg2-binary>=2.9.10",
    "python-dotenv>=1.1.1",
    "requests>=2.32.0",
    "sqlalchemy>=2.0.41",
    "types-aiofiles>=24.1.0.20250606",
    "types-requests>=2.32.4.20250611",
]


[dependency-groups]
# Dependencies needed only during development (testing, linting, etc.)
# Install with: uv sync --group dev
dev = [
    "mypy>=1.15.0",
    "ruff>=0.11.11",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=4.2.0",
    "detect-secrets>=1.5.0",
]


[tool.ruff]
# Ruff is a super-fast Python linter and formatter.
line-length = 120        # Max characters per line
target-version = "py311" # Assumes Python 3.11 features



[tool.ruff.lint]
# Select which types of issues Ruff should check for.
# E/W: pycodestyle errors/warnings (PEP 8)
# F: Pyflakes (logical errors like unused imports/variables)
# I: isort (import sorting)
# B: flake8-bugbear (potential bugs and design issues)
# C4: flake8-comprehensions (more Pythonic list/dict/set comprehensions)
# UP: pyupgrade (suggests modern Python syntax)
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = [] # Add specific rule codes here to ignore them

[tool.ruff.format]
# Configure Ruff's auto-formatting behavior.
quote-style = "double"    # Prefer "double" quotes for strings
indent-style = "space"    # Use spaces for indentation

[tool.mypy]
# Mypy is a static type checker for Python.
python_version = "3.11"        # Target Python version for type checking
warn_return_any = true         # Warn if functions implicitly return 'Any'
warn_unused_configs = true     # Warn about unused Mypy settings
disallow_untyped_defs = true   # Require type hints for function definitions
disallow_incomplete_defs = true # Require all parts of a function signature to be typed
check_untyped_defs = true      # Still type check the body of untyped functions
disallow_untyped_decorators = true # Require decorators to be typed
no_implicit_optional = true    # Make 'Optional[T]' explicit (no 'T' implying 'T | None')
warn_redundant_casts = true    # Warn if a type cast is unnecessary
warn_unused_ignores = true     # Warn about '# type: ignore' comments that are no longer needed
warn_no_return = true          # Warn if a function doesn't return when it should (or vice-versa)
warn_unreachable = true        # Warn about code that can never be executed
strict_equality = true         # Enforce stricter type checking for equality operations

disable_error_code = ["unused-ignore", "misc"] # Disable specific error codes that are too noisy

# Fix module path issues
explicit_package_bases = true
namespace_packages = true

# Handle missing imports gracefully for MLOps libraries
ignore_missing_imports = true

# Exclude problematic directories
exclude = [
    "^build/",
    "^dist/",
    "^\\.venv/",
    "^\\.git/",
    "^\\.dvc/",
]


# Specific overrides for ML libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest is a popular Python testing framework.
testpaths = ["tests"]          # # Directory where your tests are located
pythonpath = ["."]             # This adds the project root to Python path
addopts = "--cov=src --cov-report=term-missing --cov-report=html"
